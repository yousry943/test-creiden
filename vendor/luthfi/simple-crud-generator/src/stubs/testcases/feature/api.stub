<?php

namespace Tests\Feature\Api;

use fullMstr;
use Tests\BrowserKitTest as TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ManageMasterTest extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function user_can_see_master_list_in_master_index_page()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create();

        $this->getJson(route('api.masters.index'), [
            'Authorization' => 'Bearer '.$user->api_token
        ]);

        $this->seeJson(['title' => $singleMstr->title]);
    }

    /** @test */
    public function user_can_create_a_master()
    {
        $user = $this->createUser();

        $this->postJson(route('api.masters.store'), [
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ], [
            'Authorization' => 'Bearer '.$user->api_token
        ]);

        $this->seeInDatabase('masters', [
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ]);

        $this->seeStatusCode(201);
        $this->seeJson([
            'message'     => __('master.created'),
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ]);
    }

    private function getCreateFields(array $overrides = [])
    {
        return array_merge([
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ], $overrides);
    }

    /** @test */
    public function validate_master_title_is_required()
    {
        $user = $this->createUser();

        // title empty
        $requestBody = $this->getCreateFields(['title' => '']);
        $this->postJson(
            route('api.masters.store'),
            $requestBody,
            ['Authorization' => 'Bearer '.$user->api_token]
        );

        $this->seeStatusCode(422);
        $this->seeJsonStructure(['errors' => ['title']]);
    }

    /** @test */
    public function validate_master_title_is_not_more_than_60_characters()
    {
        $user = $this->createUser();

        // title 70 characters
        $requestBody = $this->getCreateFields(['title' => str_repeat('Test Title', 7)]);
        $this->postJson(
            route('api.masters.store'),
            $requestBody,
            ['Authorization' => 'Bearer '.$user->api_token]
        );

        $this->seeStatusCode(422);
        $this->seeJsonStructure(['errors' => ['title']]);
    }

    /** @test */
    public function validate_master_description_is_not_more_than_255_characters()
    {
        $user = $this->createUser();

        // description 256 characters
        $requestBody = $this->getCreateFields(['description' => str_repeat('Long description', 16)]);
        $this->postJson(
            route('api.masters.store'),
            $requestBody,
            ['Authorization' => 'Bearer '.$user->api_token]
        );

        $this->seeStatusCode(422);
        $this->seeJsonStructure(['errors' => ['description']]);
    }

    /** @test */
    public function user_can_get_a_master_detail()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create(['title' => 'Testing 123']);

        $this->getJson(route('api.masters.show', $singleMstr), [
            'Authorization' => 'Bearer '.$user->api_token
        ]);

        $this->seeJson(['title' => 'Testing 123']);
    }

    /** @test */
    public function user_can_update_a_master()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create(['title' => 'Testing 123']);

        $this->patchJson(route('api.masters.update', $singleMstr), [
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ], [
            'Authorization' => 'Bearer '.$user->api_token
        ]);

        $this->seeInDatabase('masters', [
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ]);

        $this->seeStatusCode(200);
        $this->seeJson([
            'message'     => __('master.updated'),
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ]);
    }

    private function getEditFields(array $overrides = [])
    {
        return array_merge([
            'title'       => 'Master 1 title',
            'description' => 'Master 1 description',
        ], $overrides);
    }

    /** @test */
    public function validate_master_title_update_is_required()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create();

        // title empty
        $requestBody = $this->getEditFields(['title' => '']);
        $this->patchJson(
            route('api.masters.update', $singleMstr),
            $requestBody,
            ['Authorization' => 'Bearer '.$user->api_token]
        );

        $this->seeStatusCode(422);
        $this->seeJsonStructure(['errors' => ['title']]);
    }

    /** @test */
    public function validate_master_title_update_is_not_more_than_60_characters()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create();

        // title 70 characters
        $requestBody = $this->getEditFields(['title' => str_repeat('Test Title', 7)]);
        $this->patchJson(
            route('api.masters.update', $singleMstr),
            $requestBody,
            ['Authorization' => 'Bearer '.$user->api_token]
        );

        $this->seeStatusCode(422);
        $this->seeJsonStructure(['errors' => ['title']]);
    }

    /** @test */
    public function validate_master_description_update_is_not_more_than_255_characters()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create(['title' => 'Testing 123']);

        // description 256 characters
        $requestBody = $this->getEditFields(['description' => str_repeat('Long description', 16)]);
        $this->patchJson(
            route('api.masters.update', $singleMstr),
            $requestBody,
            ['Authorization' => 'Bearer '.$user->api_token]
        );

        $this->seeStatusCode(422);
        $this->seeJsonStructure(['errors' => ['description']]);
    }

    /** @test */
    public function user_can_delete_a_master()
    {
        $user = $this->createUser();
        $singleMstr = Master::factory()->create();

        $this->deleteJson(route('api.masters.destroy', $singleMstr), [
            'master_id' => $singleMstr->id,
        ], [
            'Authorization' => 'Bearer '.$user->api_token
        ]);

        $this->dontSeeInDatabase('masters', [
            'id' => $singleMstr->id,
        ]);

        $this->seeStatusCode(200);
        $this->seeJson([
            'message' => __('master.deleted'),
        ]);
    }
}
